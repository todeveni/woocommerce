name: New Code Freeze
on:
    release:
        types: [released]

permissions: {}

env:
    GIT_COMMITTER_NAME: 'WooCommerce Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@woocommerce.com'
    GIT_AUTHOR_NAME: 'WooCommerce Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@woocommerce.com'

jobs:
    verify-release:
        name: 'Verify if the release is a major version release, that ends with .0'
        runs-on: ubuntu-20.04
        outputs:
            runCodeFreeze: ${{ steps.verify-prs.outputs.runCodeFreeze }}
            verificationFailed: ${{ steps.verify-prs.outputs.verificationFailed || 'false' }}
        steps:
            - name: Verify release
              id: verify
              uses: actions/github-script@v6
              with:
                  script: |
                      const event = context.payload;
                      const release = event.release;

                      if (release.tag_name.endsWith('.0')) {
                          core.setOutput('runVerify', 'true');
                      } else {
                          core.setOutput('runVerify', 'false');
                      }

            - name: Verify if any PR is left open by author:app/github-actions
              if: ${{ steps.verify.outputs.runVerify == 'true' }}
              id: verify-prs
              uses: actions/github-script@v6
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      let runCodeFreeze = true;
                      const event = context.payload;

                      if (event.inputs && event.inputs.skip_verify !== 'false') {
                        core.setOutput('runCodeFreeze', runCodeFreeze);
                        console.log('Skipping verification step');
                        return;
                      }

                      const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
    
                      // Helper function to add delay between API calls
                      const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    
                      // Function to handle API call with retry logic
                      const searchPRs = async (query) => {
                        let attempts = 0;
                        while (attempts < 5) {
                          try {
                            return await github.rest.search.issuesAndPullRequests({ q: query });
                          } catch (error) {
                            if (error.status === 403 && error.message.includes('secondary rate limit')) {
                              console.log('Rate limit hit, retrying...');
                              await delay(31000); // 31 second delay before retry
                              attempts++;
                            } else {
                              throw error;
                            }
                          }
                        }
                        throw new Error('Failed to fetch PRs after multiple attempts');
                      };
    
                      // Search for PRs from github-actions bot
                      const githubActionsPRsQuery = await searchPRs(`repo:${owner}/${repo} is:pr is:open author:app/github-actions`);
                      const prsOpenByGithubActions = githubActionsPRsQuery.data.items;
    
                      let failureMessage = ``;
                      let verificationFailed = false;
    
                      if (prsOpenByGithubActions.length > 0) {
                        runCodeFreeze = false;
                        verificationFailed = true;

                        failureMessage += `Identified \`${prsOpenByGithubActions.length}\` open PR(s) from \`github-actions\` bot which should be merged or closed before proceeding. <https://github.com/${owner}/${repo}/issues?q=is%3Apr+is%3Aopen+author%3Aapp%2Fgithub-actions|Click here to view the PRs>`;
    
                        failureMessage += '\n\nThis step maintains the code integrity and is critical to avoid regression in future releases. Please merge them or close them and re-run the workflow.';
                      }

                      console.error(failureMessage);
                      console.log(`verificationFailed: ${verificationFailed}`);
                      console.log(`runCodeFreeze: ${runCodeFreeze}`);
                      core.setOutput('verificationFailed', verificationFailed);
                      core.setOutput('failureMessage', failureMessage);
                      core.setOutput('runCodeFreeze', runCodeFreeze);
                      
            
            - name: Notify Slack on failure
              if: ${{ steps.verify-prs.outputs.verificationFailed == 'true' }}
              uses: archive/github-actions-slack@v2.0.0
              with:
                  slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
                  slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
                  slack-text: |
                      :x: Oops we may have missed a PR left open by `github-actions` bot. Code freeze failed.
                      :warning-8c: ${{ steps.verify-prs.outputs.failureMessage }}
                      <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow Run>
                  slack-optional-unfurl_links: false
                  slack-optional-unfurl_media: false
              continue-on-error: true
    
    prep-for-code-freeze:
        name: 'Prepare for code freeze - generate next release branch and milestone'
        if: ${{ needs.verify-release.outputs.runCodeFreeze == 'true' }}
        needs: verify-release
        runs-on: ubuntu-20.04
        outputs:
            nextReleaseBranch: ${{ steps.extract-version.outputs.nextReleaseBranch }}
            nextReleaseVersion: ${{ steps.extract-version.outputs.nextReleaseVersion }}
            milestoneForTrunk: ${{ steps.extract-version.outputs.milestoneForTrunk }}
        steps:
            - name: Extract version from release tag
              id: extract-version
              uses: actions/github-script@v6
              with:
                  script: |
                      const event = context.payload;

                      function bumpMinorVersion(currentVersion) {
                          const [major, minor, patch] = currentVersion.split('.').map(Number);

                          let nextMajor = major;
                          let nextMinor = minor + 1;
                          if (nextMinor > 9) {
                              nextMajor += 1;
                              nextMinor = 0;
                          }

                          return {
                              nextMajor,
                              nextMinor
                          };
                      }

                      const currentReleaseTag = event.release.tag_name;
                      const releaseBump = bumpMinorVersion( currentReleaseTag );
                      const nextReleaseVersion = `${releaseBump.nextMajor}.${releaseBump.nextMinor}.0`;
                      const nextReleaseBranch = `release/${releaseBump.nextMajor}.${releaseBump.nextMinor}`;

                      // Get milestone version by bumping the next release version
                      const milestoneBump = bumpMinorVersion( nextReleaseVersion );
                      const milestoneForTrunk = `${milestoneBump.nextMajor}.${milestoneBump.nextMinor}.0`;

                      core.setOutput('nextReleaseBranch', nextReleaseBranch);
                      core.setOutput('nextReleaseVersion', nextReleaseVersion);
                      core.setOutput('milestoneForTrunk', milestoneForTrunk);

                      console.log(`Next release branch: ${nextReleaseBranch}`);
                      console.log(`Next release version: ${nextReleaseVersion}`);
                      console.log(`Milestone for trunk: ${milestoneForTrunk}`);
    
    create-code-freeze-branch-and-milestone:
        name: 'Create the code freeze branch and milestone for next release'
        needs: prep-for-code-freeze
        runs-on: ubuntu-20.04
        permissions:
          issues: write
          contents: write
          pull-requests: write
        steps:
            - name: Fetch trunk branch
              uses: actions/checkout@v3
              with:
                ref: trunk

            - name: Setup PNPM
              uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d

            - name: Setup Node
              uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
              with:
                  node-version-file: .nvmrc
                  cache: pnpm
                  registry-url: 'https://registry.npmjs.org'

            - name: Install prerequisites
              run: |
                  pnpm install --filter monorepo-utils --ignore-scripts
                  # ignore scripts speeds up setup signficantly, but we still need to build monorepo utils
                  pnpm build
              working-directory: tools/monorepo-utils

            - name: Create code freeze branch out of trunk
              env:
                RELEASE_BRANCH: ${{ needs.prep-for-code-freeze.outputs.nextReleaseBranch }}
              run: |
                  git checkout trunk
                  git checkout -b $RELEASE_BRANCH

            - name: Push the new branch to the remote repository
              env:
                RELEASE_BRANCH: ${{ needs.prep-for-code-freeze.outputs.nextReleaseBranch }}
              run: git push origin $RELEASE_BRANCH

            - name: Create next monthly milestone
              id: milestone
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: pnpm utils code-freeze milestone -o ${{ github.repository_owner }} -m ${{ needs.prep-for-code-freeze.outputs.milestoneForTrunk }}

            - name: Bump versions for Beta.1 monthly release
              id: version-bump
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: pnpm utils code-freeze version-bump -o ${{ github.repository_owner }} -b ${{ needs.prep-for-code-freeze.outputs.nextReleaseBranch }} -c ${{ needs.prep-for-code-freeze.outputs.nextReleaseVersion }}-beta.1

            - name: Prepare trunk for next development cycle
              id: prep-trunk
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: pnpm utils code-freeze version-bump ${{ needs.prep-for-code-freeze.outputs.milestoneForTrunk }}-dev -o ${{ github.repository_owner }}

            - name: Notify Slack on success
              if: ${{ success() }}
              uses: archive/github-actions-slack@v2.0.0
              with:
                  slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
                  slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
                  slack-text: |
                      :ice_cube: Code Freeze completed for `${{ needs.prep-for-code-freeze.outputs.nextReleaseBranch }}` :checking:
                      You can raise a code freeze exception if you need something to be included in this release.
                  slack-optional-unfurl_links: false
                  slack-optional-unfurl_media: false

            - name: Notify Slack on failure
              if: ${{ failure() }}
              uses: archive/github-actions-slack@v2.0.0
              with:
                  slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
                  slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
                  slack-text: |
                      :warning-8c: Code freeze failed for `${{ needs.prep-for-code-freeze.outputs.nextReleaseBranch }}`. Please check the logs for more details. Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    changelog-version-update-for-trunk:
        name: Update changelog and version for trunk
        runs-on: ubuntu-20.04
        needs: verify-release
        if: ${{ needs.verify-release.outputs.verificationFailed != 'true' }}
        permissions:
          contents: write
          pull-requests: write
        steps:
            - uses: actions/checkout@v3
              with:
                ref: trunk

            - name: Copy readme.txt to vm root
              run: cp ./plugins/woocommerce/readme.txt ../../readme.txt

            - name: Switch to trunk branch
              run: git checkout trunk

            - name: Create a new branch based on trunk
              run: git checkout -b prep/post-release-tasks-${{ github.event.release.tag_name }}

            - name: Check if we need to continue processing
              uses: actions/github-script@v6
              id: check
              with:
                  script: |
                      const fs = require( 'node:fs' );
                      const version = context.payload.release.tag_name;

                      fs.readFile( './plugins/woocommerce/readme.txt', 'utf-8', function( err, data ) {
                        if ( err ) {
                          console.error( err );
                        }

                        const regex = /Stable\stag:\s(\d+\.\d+\.\d+)/;

                        const stableVersion = data.match( regex )[1];

                        // If the release version is less than stable version we can bail.
                        if ( version.localeCompare( stableVersion, undefined, { numeric: true, sensitivity: 'base' } ) == -1 ) {
                          console.log( 'Release version is less than stable version. No automated action taken. A manual process is required.' );
                          core.setOutput( 'continue', 'false' )
                          return;
                        } else {
                          core.setOutput( 'continue', 'true' )
                        }
                      } )

            - name: Update changelog.txt entries
              uses: actions/github-script@v6
              id: update-entries
              if: steps.check.outputs.continue == 'true'
              with:
                  script: |
                      const fs = require( 'node:fs' );
                      const version = context.payload.release.tag_name;

                      // Read the saved readme.txt file from earlier.
                      fs.readFile( '../../readme.txt', 'utf-8', function( err, readme ) {
                        if ( err ) {
                          core.setFailed( err );
                        }

                        const regex = /(== Changelog ==[\s\S]+)\s{2}\[See changelog for all versions\]\(https:\/\/raw\.githubusercontent\.com\/woocommerce\/woocommerce\/trunk\/changelog\.txt\)\./;

                        const entries = readme.match( regex )[1];

                        fs.readFile( './changelog.txt', 'utf-8', function( err, changelog ) {
                          if ( err ) {
                            core.setFailed( err );
                          }

                          const regex = /== Changelog ==/;

                          const updatedChangelog = changelog.replace( regex, entries );

                          fs.writeFile( './changelog.txt', updatedChangelog, err => {
                            if ( err ) {
                              core.setFailed( err );
                            }
                          } )
                        } )
                      } )

            - name: Commit changes
              id: commit-changes
              run: |
                git commit -am "Prep post release ${{ github.event.release.tag_name }}"
                commit_sha=$(git rev-parse HEAD)
                echo "::set-output name=commit_hash::${commit_sha}"

            - name: Push branch up
              run: git push origin prep/post-release-tasks-${{ github.event.release.tag_name }} -f

            - name: Create the PR
              uses: actions/github-script@v6
              with:
                  script: |
                      const body = "This PR updates the changelog.txt entries for trunk based on the latest release: ${{ github.event.release.tag_name }}"

                      const pr = await github.rest.pulls.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: "Update changelog.txt from release ${{ github.event.release.tag_name }}",
                        head: "prep/post-release-tasks-${{ github.event.release.tag_name }}",
                        base: "trunk",
                        body: body
                      })

                      const prCreated = await github.rest.pulls.requestReviewers({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: pr.data.number,
                        reviewers: ["${{ github.event.release.author.login }}"]
                      })
